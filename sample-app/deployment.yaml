apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    version: v1
    "compliance.region": "${REGION}"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ${APP_NAME}
      version: v1
  template:
    metadata:
      labels:
        app: ${APP_NAME}
        version: v1
        "compliance.region": "${REGION}"
      annotations:
        # Istio sidecar injection (automatic in labeled namespaces)
        sidecar.istio.io/inject: "true"
        # Prometheus metrics scraping
        "prometheus.io/scrape": "true"
        "prometheus.io/port": "8080"
        "prometheus.io/path": "/api/health"
    spec:
      serviceAccountName: default
      securityContext:
        # Pod-level security context - relaxed for k3d demo
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: ${APP_NAME}
        # Use the multi-stage built image
        image: ${APP_NAME}:latest
        imagePullPolicy: Never
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: REGION
          value: "${REGION}"
        - name: NAMESPACE
          value: "${NAMESPACE}"
        - name: S3_ENABLED
          value: "${S3_ENABLED}"
        ${S3_ENV_FROM_SECTION}
        # Health and readiness probes using new API endpoints
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        # Container security context
        securityContext:
          # Run as non-root user (created in Dockerfile)
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          readOnlyRootFilesystem: false  # Flask needs to write temp files
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE  # Allow binding to port 8080
        # Resource limits for production
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
